.d-flex.justify-content-between.flex-wrap.flex-md-nowrap.align-items-center.pt-3.pb-2.mb-3.border-bottom
  - if @event
    %h1.h2 Assistants for #{@event.title}
  - else
    %h1.h2 All Assistants
  .btn-toolbar.mb-2.mb-md-0
    - if @event
      = link_to 'Back to Event', admin_event_path(@event), class: 'btn btn-secondary me-2'
      = link_to 'Add Assistant', new_admin_event_assistant_path(@event), class: 'btn btn-primary me-2'
      - assistants_with_phone = @assistants.select { |a| a.phone.present? }
      - if assistants_with_phone.any?
        = button_to 'Send All WhatsApp', send_all_whatsapp_invitations_admin_event_path(@event),
          method: :post,
          data: { confirm: "Send WhatsApp invitations to #{assistants_with_phone.count} assistants?" },
          class: 'btn btn-success'

.row.mb-3
  .col-md-6
    = form_with url: (@event ? admin_event_assistants_path(@event) : admin_assistants_path), method: :get, local: true, class: 'd-flex' do |form|
      = form.text_field :search, value: params[:search], placeholder: 'Search assistants...', 
        class: 'form-control me-2'
      = form.submit 'Search', class: 'btn btn-outline-secondary'
      - if params[:search].present?
        = link_to 'Clear', (@event ? admin_event_assistants_path(@event) : admin_assistants_path), 
          class: 'btn btn-outline-danger ms-2'

- if @assistants.any?
  .alert.alert-info
    Found #{@assistants.count} assistant#{'s' if @assistants.count != 1}
    - if params[:search].present?
      matching "#{params[:search]}"

  .table-responsive
    %table.table.table-striped.table-sm
      %thead
        %tr
          %th{scope: "col"} Name
          %th{scope: "col"} Email
          %th{scope: "col"} Phone
          %th{scope: "col"} Attendance
          %th{scope: "col"} WhatsApp
          - unless @event
            %th{scope: "col"} Event
          %th{scope: "col"} Extra Fields
          %th{scope: "col"} Actions
      %tbody
        - @assistants.each do |assistant|
          %tr
            %td= assistant.name
            %td= assistant.email
            %td= assistant.phone
            %td
              - case assistant.attendance_status
              - when :registered
                %span.badge.bg-secondary= assistant.attendance_status.to_s.humanize
              - when :confirmed
                %span.badge.bg-primary= assistant.attendance_status.to_s.humanize
              - when :attended
                %span.badge.bg-success= assistant.attendance_status.to_s.humanize
              - when :absent
                %span.badge.bg-warning= assistant.attendance_status.to_s.humanize
              - when :cancelled
                %span.badge.bg-danger= assistant.attendance_status.to_s.humanize
              - else
                %span.badge.bg-light.text-dark= assistant.attendance_status.to_s.humanize
            %td
              - case assistant.whatsapp_invitation_status
              - when :not_sent
                %span.badge.bg-light.text-dark ğŸ“± Not Sent
              - when :sent
                %span.badge.bg-info ğŸ“± Sent
              - when :failed
                %span.badge.bg-danger ğŸ“± Failed
              - when :delivered
                %span.badge.bg-success ğŸ“± Delivered
              - else
                %span.badge.bg-light.text-dark ğŸ“± Unknown
            - unless @event
              %td= link_to assistant.event.title, admin_event_path(assistant.event), class: 'text-decoration-none'
            %td
              - if assistant.open1.present? || assistant.open2.present? || assistant.open3.present?
                - if assistant.open1.present?
                  %span.badge.bg-light.text-dark.me-1= assistant.open1
                - if assistant.open2.present?
                  %span.badge.bg-light.text-dark.me-1= assistant.open2
                - if assistant.open3.present?
                  %span.badge.bg-light.text-dark.me-1= assistant.open3
              - else
                %span.text-muted None
            %td
              = link_to 'Edit', edit_admin_event_assistant_path(assistant.event, assistant), class: 'btn btn-sm btn-outline-secondary me-1'
              %button.btn.btn-sm.btn-outline-info.me-1{type: 'button', 'data-bs-toggle': 'modal', 'data-bs-target': "#qrModal#{assistant.id}"}
                QR Code
              - if assistant.phone.present?
                = button_to 'Send WhatsApp', send_whatsapp_invitation_admin_assistant_path(assistant), 
                  method: :post, 
                  data: { confirm: "Send WhatsApp invitation to #{assistant.formatted_phone_for_whatsapp}?" },
                  class: 'btn btn-sm btn-success me-1'
              - else
                %button.btn.btn-sm.btn-secondary.me-1{disabled: true, title: 'No phone number'}
                  No Phone
              = link_to 'Delete', admin_event_assistant_path(assistant.event, assistant), method: :delete, 
                confirm: 'Are you sure?', class: 'btn btn-sm btn-outline-danger'
- else
  .alert.alert-warning
    - if params[:search].present?
      No assistants found matching "#{params[:search]}"
    - else
      No assistants found.

- @assistants.each do |assistant|
  .modal.fade{id: "qrModal#{assistant.id}", tabindex: "-1"}
    .modal-dialog
      .modal-content
        .modal-header
          %h5.modal-title QR Code for #{assistant.name}
          %button.btn-close{type: "button", "data-bs-dismiss": "modal"}
        .modal-body
          .text-center
            %p.mb-3
              %strong Event:
              = assistant.event.title
            - if assistant.phone.present?
              %p.mb-3
                %strong WhatsApp:
                #{assistant.phone} â†’ #{assistant.formatted_phone_for_whatsapp}
            %p.mb-3
              %strong Status:
              - case assistant.attendance_status
              - when :registered
                %span.badge.bg-secondary= assistant.attendance_status.to_s.humanize
              - when :confirmed
                %span.badge.bg-primary= assistant.attendance_status.to_s.humanize
              - when :attended
                %span.badge.bg-success= assistant.attendance_status.to_s.humanize
              - when :absent
                %span.badge.bg-warning= assistant.attendance_status.to_s.humanize
              - when :cancelled
                %span.badge.bg-danger= assistant.attendance_status.to_s.humanize
            %div.border.p-3.bg-light
              %small.text-muted QR Code URL:
              %br
              %code= assistant.generate_qr_url(request.host_with_port)
              %br
              %br
              %small.text-muted Direct Link:
              %br
              = link_to assistant.generate_qr_url(request.host_with_port), assistant.generate_qr_url(request.host_with_port), target: '_blank', class: 'btn btn-sm btn-success'
            %p.mt-3.text-muted
              %small Scan this QR code at the event entrance to mark as attended